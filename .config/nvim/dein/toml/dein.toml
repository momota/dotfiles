[[plugins]]
repo = 'Shougo/dein.vim'

##
# status bar
##

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
hook_add = '''
    let g:airline_theme = 'iceberg'
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
'''

#####################################################################
# Filer
#####################################################################

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden = 1

  " Closes after opening a file
  let NERDTreeQuitOnOpen = 1

  nnoremap <silent><Space>ff :NERDTreeFind<CR>:vertical res 30<CR>
  nnoremap <silent><Space>ft :NERDTreeToggle<CR>:vertical res 30<CR>
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add='''
  let g:webdevicons_enable_nerdtree = 1
  let g:webdevicons_enable_denite = 1
'''


[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  " let g:ctrlp_cmd = 'CtrlPMRU'
  let g:ctrlp_types = ["mru", 'fil', 'buf']
  let g:ctrlp_mruf_max = 300
  if executable('ag')
    let g:ctrlp_use_caching = 0
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup -g ""'
  endif
  nnoremap <silent><Space>fm :CtrlP .<CR>
'''


#####################################################################
# 検索 置換
#####################################################################

# 検索にagを使う
[[plugins]]
repo = 'rking/ag.vim'
hook_add = '''
    let g:ag_prg="ag --vimgrep --hidden"
'''

# 置換 preview
[[plugins]]
repo = 'markonm/traces.vim'

# Underlines the word under the cursor 
[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  " <Leader>f{char} to move to {char}
  map  <Leader><Leader>f <Plug>(easymotion-bd-f)
  nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)
  
  " s{char}{char} to move to {char}{char}
  nmap s <Plug>(easymotion-overwin-f2)
  
  " Move to line
  map <Leader><Leader>L <Plug>(easymotion-bd-jk)
  nmap <Leader><Leader>L <Plug>(easymotion-overwin-line)
  
  " Move to word
  map  <Leader><Leader>w <Plug>(easymotion-bd-w)
  nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
'''

# cmigemo
[[plugins]]
repo = 'haya14busa/vim-migemo'


#####################################################################
# appearance
#####################################################################

##
# syntax
##

[[plugins]]
repo = 'cespare/vim-toml'


##
# colorscheme
##

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add='''
  colorscheme iceberg
'''

# 色情報が入ったファイルを開いた場合は表示を色付けする
[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'

# 括弧の対応を分かりやすくするため色を変える
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''

# インデントガイド
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

# インデントのレベルによって色を変える
[[plugins]]
repo = 'thiagoalessio/rainbow_levels.vim'

# font size controller
[[plugins]]
repo = 'thinca/vim-fontzoom'



#####################################################################
# completion
#####################################################################

# auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim'

# auto close (x)html tags
[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
    let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.erb,*.php,*.vue'
'''

# coc.nvim: Nodejs extension host for vim & neovim, load extensions like VSCode and host language servers.
[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_source = '''
  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  if has("nvim-0.5.0") || has("patch-8.1.1564")
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
  else
    set signcolumn=yes
  endif

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " Make <CR> auto-select the first completion item and notify coc.nvim to
  " format on enter, <cr> could be remapped by other vim plugin
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current buffer.
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Remap <C-f> and <C-b> for scroll float windows/popups.
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  " Use CTRL-S for selections ranges.
  " Requires 'textDocument/selectionRange' support of language server.
  nmap <silent> <C-s> <Plug>(coc-range-select)
  xmap <silent> <C-s> <Plug>(coc-range-select)

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')

  " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

  " Add (Neo)Vim's native statusline support.
  " NOTE: Please see `:h coc-status` for integrations with external plugins that
  " provide custom statusline: lightline.vim, vim-airline.
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Mappings for CoCList
  " Show all diagnostics.
  nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions.
  nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
  " Show commands.
  nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document.
  nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list.
  nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

  "
  " coc-snippets
  "
  " Use <C-l> for trigger snippet expand.
  imap <C-l> <Plug>(coc-snippets-expand)

  " Use <C-j> for select text for visual placeholder of snippet.
  vmap <C-j> <Plug>(coc-snippets-select)

  " Use <C-j> for jump to next placeholder, it's default of coc.nvim
  let g:coc_snippet_next = '<c-j>'

  " Use <C-k> for jump to previous placeholder, it's default of coc.nvim
  let g:coc_snippet_prev = '<c-k>'

  " Use <C-j> for both expand and jump (make expand higher priority.)
  imap <C-j> <Plug>(coc-snippets-expand-jump)

  " Use <leader>x for convert visual selected code to snippet
  xmap <leader>x  <Plug>(coc-convert-snippet)
'''

##
# neosnippet
##

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
# hook_source = '''
#   " <TAB>: completion.
#   " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
#   inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
#   
#   " Plugin key-mappings.
#   imap <C-s>     <Plug>(neosnippet_expand_or_jump)
#   smap <C-s>     <Plug>(neosnippet_expand_or_jump)
#   
#   " SuperTab like snippets behavior.
#   " imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
#   imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
#   smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
#   
#   " For snippet_complete marker.
#   if has('conceal')
#     set conceallevel=2 concealcursor=i
#   endif
#   "
#   " スニペットファイルの保存ディレクトリのパスを登録
#   let g:neosnippet#snippets_directory='~/.config/nvim/neosnippets/snippets'
#   
#   " 補完メニューの高さ指定
#   set pumheight=10
# '''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

#####################################################################
# development
#####################################################################

# asynchronous execution library
[[plugins]]
repo = 'Shougo/vimproc.vim'

# run command quickly
[[plugins]]
repo = 'thinca/vim-quickrun'

# A Git wrapper so awesome, it should be illegal
[[plugins]]
repo = 'tpope/vim-fugitive'

# quoting/parenthesizing made simple
[[plugins]]
repo = 'tpope/vim-surround'

# Automatically save changes to disk
[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
    let g:auto_save = 1
    " do not save while in insert mode
    let g:auto_save_in_insert_mode = 0
'''

